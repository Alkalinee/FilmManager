<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <assembly alias="System.Windows.Forms" name="System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
  <data name="nocover" type="System.Resources.ResXFileRef, System.Windows.Forms">
    <value>..\Resources\nocover.png;System.Drawing.Bitmap, System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a</value>
  </data>
  <data name="Table" xml:space="preserve">
    <value>&lt;table width="100%" cellspacing="0" class="movietable"&gt;
&lt;tbody&gt;&lt;tr&gt;
&lt;td class="poster" rowspan="4" width="95"&gt;&lt;img src="{0}"&gt;&lt;/td&gt;
&lt;td class="title" height="1*"&gt;&lt;b&gt;&amp;nbsp;
&lt;a class="MTITLE" href="{1}"&gt;{2}&lt;/a&gt;&lt;/b&gt;
 (&lt;span class="MYEAR"&gt;{3}&lt;/span&gt;) &amp;nbsp; &lt;small&gt;&lt;i&gt;&lt;/i&gt;&lt;/small&gt;
&lt;/td&gt;&lt;/tr&gt;
&lt;tr class="moviedesc"&gt;&lt;td height="1*"&gt;
FSK: {4} &amp;nbsp;&amp;nbsp; Runtime: &lt;b class="MRUNTIME"&gt;{5}&lt;/b&gt; min &amp;nbsp;&amp;nbsp; &lt;i class="MGENRE"&gt;({6})&lt;/i&gt;
&lt;/td&gt;&lt;/tr&gt;
&lt;tr class="moviedesc"&gt;&lt;td class="plot"&gt;&lt;font size="-1"&gt;
 {7}
&lt;/font&gt;&lt;/td&gt;&lt;/tr&gt;
&lt;tr class="moviemeta"&gt;&lt;td height="1*"&gt;
&lt;font size="-2"&gt;
Original Titel: {11}
&lt;br/&gt;Studio: {8}
&lt;br/&gt;Regisseur: {9}
&lt;br/&gt;Drehort: {10}
&lt;br&gt;Links: &lt;a class="HOVER_BOLD" href="{12}"&gt;Trailer&lt;/a&gt;&amp;nbsp;
&lt;/font&gt;
&lt;/td&gt;&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;&lt;br&gt;

&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;</value>
  </data>
  <data name="WebsiteBottom" xml:space="preserve">
    <value>&lt;/tbody&gt;&lt;/table&gt;
&lt;br&gt;&lt;div align="right"&gt;&lt;font size="-2"&gt;&lt;i&gt;Generiert vom Filmmanager von Vincent&lt;/i&gt;&lt;/font&gt;&lt;/div&gt;

&lt;/body&gt;&lt;/html&gt;</value>
  </data>
  <data name="WebsiteHeader" xml:space="preserve">
    <value>&lt;!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd"&gt;
&lt;!-- saved from url=(0050)http://smoviecat.sourceforge.net/demo/catalog.html --&gt;
&lt;html xmlns="http://www.w3.org/1999/xhtml" lang="en-US" xml:lang="en-US"&gt;&lt;head&gt;&lt;meta http-equiv="Content-Type" content="text/html; charset=ISO-8859-1"&gt;
&lt;title&gt;Vincents Filme&lt;/title&gt;

&lt;script src="./files/moviecat.js" type="text/javascript"&gt;&lt;/script&gt;
&lt;link type="text/css" rel="alternate stylesheet" href="./files/black.css" title="black"&gt;
&lt;link type="text/css" rel="alternate stylesheet" href="./files/old.css" title="old"&gt;
&lt;link type="text/css" rel="stylesheet" href="./files/white.css" title="white"&gt;
&lt;style type="text/css"&gt;&lt;!--
span.HOVER_ULN:hover {{text-decoration: underline}}
a.HOVER_BOLD:hover {{font-weight: bold}}
input[type=text] {{font-size: small; height: 1em;}}
input[type=checkbox] {{margin: 0px; width:13px; height:13px;}}
input[type=radio] {{margin: 0px; width:13px; height:13px;}}
span.MDIRTIME {{display: none}}
--&gt;&lt;/style&gt;
&lt;style type="text/css"&gt;&lt;/style&gt;&lt;/head&gt;
&lt;body bgcolor="lightgrey"&gt;
&lt;form style="position: absolute; top: 2pt; right: 2pt;" name="ThemeForm"&gt;Theme:&lt;select name="ThemeList" size="1" onchange="switchTheme(this.form)"&gt;
&lt;option value="black"&gt;black&lt;/option&gt;
&lt;option value="old"&gt;old&lt;/option&gt;
&lt;option selected="" value="white"&gt;white&lt;/option&gt;
&lt;/select&gt;&lt;/form&gt;
Sort by:
&lt;a id="SORT_TITLE" href="javascript:sort_title()" style="font-weight: bold; border: thin solid black; text-decoration: none; background-color: silver;"&gt;Title&lt;span id="SORT_DIRECTION"&gt;&lt;small&gt;&amp;#9650;&lt;/small&gt;&lt;/span&gt;&lt;/a&gt; 
&lt;a id="SORT_RUNTIME" href="javascript:sort_runtime()"&gt;Runtime&lt;/a&gt; 
&lt;a id="SORT_YEAR" href="javascript:sort_year()"&gt;Year&lt;/a&gt; 
&lt;br&gt;&lt;br&gt;
&lt;span id="FILTER_HEAD"&gt;Filter: &lt;small&gt;
&lt;i id="STATUS"&gt;{0} Movies&lt;/i&gt; 
&amp;nbsp; &lt;a href="javascript:filter_reset()"&gt;reset&lt;/a&gt;
&amp;nbsp; &lt;a id="SHOW_FILTER1" href="javascript:show_filter(1)" style="display: none;"&gt;show tags&lt;/a&gt;
&amp;nbsp; &lt;a id="SHOW_FILTER2" href="javascript:show_filter(2)" style="display: none;"&gt;show genre&lt;/a&gt;
&amp;nbsp; &lt;a id="SHOW_FILTER3" href="javascript:show_filter(3)"&gt;more options&lt;/a&gt;
&lt;/small&gt;&lt;/span&gt;
&lt;form id="FORM_FILTER" style="display:inline" onsubmit="do_filter();return(false)"&gt;
&lt;table id="FILTER_TABLE" cellspacing="3" cellpadding="0" bgcolor="silver"&gt;
&lt;tbody&gt;&lt;tr valign="top"&gt;
&lt;td id="HIDE_FILTER2"&gt;
&lt;table id="GENRE_TABLE" cellspacing="0" cellpadding="0"&gt;
&lt;tbody&gt;&lt;tr valign="top"&gt;
&lt;td&gt;Genre:&amp;nbsp;&lt;br&gt;&lt;small&gt;
&lt;a href="javascript:genre_all()"&gt;all&lt;/a&gt;&lt;br&gt;
&lt;a href="javascript:genre_none()"&gt;none&lt;/a&gt;&lt;br&gt;
&lt;a href="javascript:hide_filter(2)"&gt;hide&lt;/a&gt;&lt;br&gt;
&lt;/small&gt;&lt;/td&gt;
&lt;td&gt;&lt;small&gt;
&lt;input type="checkbox" id="G_ACTION" checked="checked" onclick="do_filter()"&gt;&lt;span class="HOVER_ULN" onclick="genre_one(&amp;#39;G_ACTION&amp;#39;)"&gt;Action&lt;/span&gt;&amp;nbsp;&lt;br&gt;
&lt;input type="checkbox" id="G_ADVENTURE" checked="checked" onclick="do_filter()"&gt;&lt;span class="HOVER_ULN" onclick="genre_one(&amp;#39;G_ADVENTURE&amp;#39;)"&gt;Adventure&lt;/span&gt;&amp;nbsp;&lt;br&gt;
&lt;input type="checkbox" id="G_ANIMATION" checked="checked" onclick="do_filter()"&gt;&lt;span class="HOVER_ULN" onclick="genre_one(&amp;#39;G_ANIMATION&amp;#39;)"&gt;Animation&lt;/span&gt;&amp;nbsp;&lt;br&gt;
&lt;input type="checkbox" id="G_COMEDY" checked="checked" onclick="do_filter()"&gt;&lt;span class="HOVER_ULN" onclick="genre_one(&amp;#39;G_COMEDY&amp;#39;)"&gt;Comedy&lt;/span&gt;&amp;nbsp;&lt;br&gt;
&lt;input type="checkbox" id="G_FANTASY" checked="checked" onclick="do_filter()"&gt;&lt;span class="HOVER_ULN" onclick="genre_one(&amp;#39;G_FANTASY&amp;#39;)"&gt;Fantasy&lt;/span&gt;&amp;nbsp;&lt;br&gt;
&lt;/small&gt;&lt;/td&gt;&lt;td&gt;&lt;small&gt;
&lt;input type="checkbox" id="G_MYSTERY" checked="checked" onclick="do_filter()"&gt;&lt;span class="HOVER_ULN" onclick="genre_one(&amp;#39;G_MYSTERY&amp;#39;)"&gt;Mystery&lt;/span&gt;&amp;nbsp;&lt;br&gt;
&lt;input type="checkbox" id="G_SCI-FI" checked="checked" onclick="do_filter()"&gt;&lt;span class="HOVER_ULN" onclick="genre_one(&amp;#39;G_SCI-FI&amp;#39;)"&gt;Sci-Fi&lt;/span&gt;&amp;nbsp;&lt;br&gt;
&lt;input type="checkbox" id="G_SHORT" checked="checked" onclick="do_filter()"&gt;&lt;span class="HOVER_ULN" onclick="genre_one(&amp;#39;G_SHORT&amp;#39;)"&gt;Short&lt;/span&gt;&amp;nbsp;&lt;br&gt;
&lt;input type="checkbox" id="G_THRILLER" checked="checked" onclick="do_filter()"&gt;&lt;span class="HOVER_ULN" onclick="genre_one(&amp;#39;G_THRILLER&amp;#39;)"&gt;Thriller&lt;/span&gt;&amp;nbsp;&lt;br&gt;
&lt;/small&gt;&lt;/td&gt;
&lt;td style="width:1em"&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/td&gt;
&lt;td id="HIDE_FILTER3" style="display: none;"&gt;
&lt;table id="RANGE_TABLE" cellspacing="0" cellpadding="0"&gt;
&lt;tbody&gt;&lt;tr&gt;&lt;td&gt;Year: &lt;/td&gt;&lt;td&gt;
&lt;input type="text" id="YMIN" value="0" maxlength="5" size="2" onkeyup="numbersOnly(this)" onchange="do_filter()"&gt; - 
&lt;input type="text" id="YMAX" value="2008" maxlength="5" size="2" onkeyup="numbersOnly(this)" onchange="do_filter()"&gt;&lt;/td&gt;&lt;/tr&gt;

&lt;tr&gt;&lt;td&gt;Runtime: &lt;/td&gt;&lt;td&gt;
&lt;input type="text" id="TMIN" value="0" maxlength="5" size="2" onkeyup="numbersOnly(this)" onchange="do_filter()"&gt; - 
&lt;input type="text" id="TMAX" value="200" maxlength="5" size="2" onkeyup="numbersOnly(this)" onchange="do_filter()"&gt;&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td colspan="2"&gt;&lt;small&gt;
&amp;nbsp; &lt;a href="javascript:hide_filter(3)"&gt;hide&lt;/a&gt;
&lt;/small&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;
&lt;/form&gt;&lt;br&gt;
&lt;script type="text/javascript"&gt;init_filter();&lt;/script&gt;
&lt;table id="MTABLE" cellspacing="0" cellpadding="0"&gt;
&lt;tbody&gt;&lt;tr&gt;&lt;td&gt;</value>
  </data>
  <data name="MovieCat" xml:space="preserve">
    <value>/*
    Simple Movie Catalog (javascript)
    Copyright (C) 2008-2010 damien.langg@gmail.com
    License: GPL &lt;http://www.gnu.org/licenses/&gt;
*/

var initialized = false;
var debug_enabled = false;
var debug_obj = new Object();
var current_sort;
var current_dir = 1;
var sort_steps = 0;

window.onload = moviecat_init;

function moviecat_init()
{
    if (get_url_param("debug")) debug_enabled = true;
    if (debug_enabled) enable_debug();
    initialized = true;
    active_sort("SORT_TITLE", 1);
    init_filter();
}

function enable_debug()
{
    debug_obj = document.getElementById("DEBUG");
    if (!debug_obj) {
        var body = document.getElementsByTagName("body")[0];
        body.innerHTML = "&lt;b id=DEBUG&gt;.&lt;/b&gt;&lt;br&gt;" + body.innerHTML;
        debug_obj = document.getElementById("DEBUG");
    }
    if (debug_obj) {
        debug_enabled = true;
    } else {
        debug_enabled = false;
        debug_obj = new Object();
        alert("enable_debug() Failed!");
    }
}

function debug(x)
{
    if (!debug_enabled) return;
    debug_obj.innerHTML = x;
}

function debug_add(x)
{
    if (!debug_enabled) return;
    debug_obj.innerHTML += x;
}


function get_url_param(name)
{
    name = name.replace(/[\[]/,"\\\[").replace(/[\]]/,"\\\]");
    var regexS = "[\\?&amp;]"+name+"=([^&amp;#]*)";
    var regex = new RegExp( regexS );
    var results = regex.exec( window.location.href );
    if( results == null )
        return "";
    else
        return results[1];
}


function getElementsByClassNameX(className, tag, elm){
	var testClass = new RegExp("(^|\\s)" + className + "(\\s|$)");
	var tag = tag || "*";
	var elm = elm || document;
	var elements = (tag == "*" &amp;&amp; elm.all)? elm.all : elm.getElementsByTagName(tag);
	var returnElements = [];
	var current;
	var length = elements.length;
	for(var i=0; i&lt;length; i++){
		current = elements[i];
		if(testClass.test(current.className)){
			returnElements.push(current);
		}
	}
	return returnElements;
}

function getElementsByClassName(node, classname) {
    if (node.getElementsByClassName) {
        return node.getElementsByClassName(classname);
    } else {
        return getElementsByClassNameX(classname, "*", node);
    }
}

function getValue(obj, cname)
{
    var e = getElementsByClassName(obj, cname);
    if (!e || !e[0]) return undefined;
    return e[0].innerHTML;
}

function getNumValue(obj, cname)
{
    var v = Number(getValue(obj, cname));
    if (!v || isNaN(v)) return 0;
    return v;
}


function cmp_number(a,b)
{
    if (isNaN(a)) a = 0;
    if (isNaN(b)) b = 0;
    return a - b;
}

function cmp_text(a,b)
{
    if (a &lt; b) return -1;
    if (a == b) return 0;
    return 1;
}

function by_number(a,b)
{
    sort_steps++;
    var cmp = cmp_number(a.val, b.val);
    if (!cmp &amp;&amp; a.val2 &amp;&amp; b.val2) {
        // if equal use secondary key
        return cmp_text(a.val2, b.val2);
    }
    return cmp;
}

function by_text(a,b)
{
    sort_steps++;
    return cmp_text(a.val, b.val);
}

function by_number_rev(a,b)
{
    var cmp = - cmp_number(a.val, b.val);
    if (!cmp &amp;&amp; a.val2 &amp;&amp; b.val2) {
        // if equal use secondary key
        // (intentionaly not reversed)
        return cmp_text(a.val2, b.val2);
    }
    return cmp;
}

function by_text_rev(a,b)
{
    return - by_text(a,b);
}

function table_sort(table, classname, datatype, direction, class2)
{
    var tbody = table.tBodies[0];
    var tbrows = tbody.rows;
    var rows = new Array(tbrows.length);
    var r, i;
    var t0, t1, t2;
    var sort_fun;
    t0 = t1 = new Date().getTime();
    debug_add("table_sort("+classname+") ");
    for(i=0; i&lt;tbrows.length; i++) {
        r = tbrows[i];
        rows[i] = new Object();
        rows[i].val = getValue(r, classname);
        if (class2) {
            rows[i].val2 = getValue(r, class2);
        }
        rows[i].row = r;
    }
    t2 = new Date().getTime();
    debug_add("times: prepare: " + (t2-t1) + " ms ");
    sort_steps = 0;
    t1 = new Date().getTime();
    if (datatype == "number") {
        sort_fun = (direction &lt; 0) ? by_number_rev :  by_number;
    } else { //if (datatype == "text") {
        sort_fun = (direction &lt; 0) ? by_text_rev :  by_text;
    }
    rows.sort(sort_fun);
    t2 = new Date().getTime();
    debug_add("sort: " + (t2-t1) + " ms ");
    t1 = new Date().getTime();
    // rearrange table
    for(i=0; i&lt;tbrows.length; i++) {
        //tbody.appendChild(rows[i].row);
        tbody.insertBefore(rows[i].row, tbrows[i]);
    }
    t2 = new Date().getTime();
    debug_add("rearrange: " + (t2-t1) + " ms ");
    debug_add("total: " + (t2-t0) + " ms ");
    debug_add("steps: " + sort_steps);
}

function active_sort(id, dir)
{
    var new_sort = document.getElementById(id);
    if (current_sort) {
        if (current_sort == new_sort) {
            dir = -current_dir;
        }
        current_sort.style.fontWeight = "normal";
        current_sort.style.backgroundColor = "transparent";
        current_sort.style.border = "thin none black";
        current_sort.style.textDecoration = "underline";
    }
    current_sort = new_sort;
    current_dir = dir;
    current_sort.style.fontWeight = "bold";
    current_sort.style.backgroundColor = "silver";
    current_sort.style.border = "thin solid black";
    current_sort.style.textDecoration = "none";
    var sort_dir = document.getElementById("SORT_DIRECTION");
    if (sort_dir) sort_dir.parentNode.removeChild(sort_dir);
    sort_dir = document.createElement('span');
    sort_dir.id = "SORT_DIRECTION";
    //sort_dir.innerHTML = (dir &gt; 0) ? "&amp;uarr;" : "&amp;darr;";
    sort_dir.innerHTML = (dir &gt; 0) ? "&lt;small&gt;&amp;#9650;&lt;/small&gt;" : "&lt;small&gt;&amp;#9660;&lt;/small&gt;";

    current_sort.appendChild(sort_dir);
    return dir;
}

function do_sort(name, dtype, dir)
{
    if (!initialized) return;
    debug("");
    var mtable = document.getElementById("MTABLE");
    var sname = "SORT_" + name;
    var cname = "M" + name;
    dir = active_sort(sname, dir);
    table_sort(mtable, cname, dtype, dir, "MTITLE")
}

function sort_title()
{
    do_sort("TITLE", "text", +1)
}

function sort_rating()
{
    do_sort("RATING", "number", -1)
}

function sort_runtime()
{
    do_sort("RUNTIME", "number", +1)
}

function sort_year()
{
    do_sort("YEAR", "number", -1)
}

function sort_dirtime()
{
    do_sort("DIRTIME", "number", -1)
}

function sort_user(x)
{
    do_sort("UV"+x, "number", -1)
}

// genre filter

function genre_set_all(x)
{
    var gtable = document.getElementById("GENRE_TABLE");
    var gbox = gtable.getElementsByTagName("input");
    var i;
    for (i=0; i&lt;gbox.length; i++) {
        if (gbox[i].type == "checkbox") {
            gbox[i].checked = x;
        }
    }
}

function genre_all()
{
    if (!initialized) return;
    genre_set_all(true);
    do_filter();
}

function genre_none()
{
    if (!initialized) return;
    genre_set_all(false);
    do_filter();
}

function genre_one(x)
{
    if (!initialized) return;
    debug(x);
    var gbox = document.getElementById(x);
    if (gbox.type == "checkbox") {
        genre_set_all(false);
        gbox.checked = true;
        do_filter();
    }
}

var gmatch_mode = 0;

function genre_get()
{
    var gtable = document.getElementById("GENRE_TABLE");
    var gbox = gtable.getElementsByTagName("input");
    var genre = new Array();
    var i;
    var all_g = 0;
    for (i=0; i&lt;gbox.length; i++) {
        if (gbox[i].type != "checkbox") continue;
        all_g++;
        if (gbox[i].checked) {
            genre.push(gbox[i].id.substr(2)); // strip G_
        }
    }
    if (genre.length &gt; all_g/2) {
        // more than half genres selected
        // match all in movie mode
        gmatch_mode = 1;
    } else {
        // match any
        gmatch_mode = 0;
    }
    debug_add("&lt;br&gt;Genre: " + genre.join(" "));
    return genre;
}

function genre_match(mgstring, garray)
{
    mgstring = mgstring.replace(/[ \/]+/g, " ").replace(/[()]/g, "");
    var mgarr = mgstring ? mgstring.split(" ") : [];
    var i;
    if (gmatch_mode == 0) {
        // match any
        for (i=0; i&lt;mgarr.length; i++) {
            if (indexOf(garray, mgarr[i]) != -1) return true;
        }
        return false;
    } else {
        // match all in movie
        for (i=0; i&lt;mgarr.length; i++) {
            if (indexOf(garray, mgarr[i]) == -1) return false;
        }
        return true;
    }
}

// Tags

function tag_all()
{
    var table = document.getElementById("TAG_TABLE");
    var input = table.getElementsByTagName("input");
    var i;
    for (i=0; i&lt;input.length; i++) {
        if (input[i].type == "radio" &amp;&amp; input[i].value == "all") {
            input[i].checked = 1;
        }
    }
    do_filter();
}

function tag_set(tid, val)
{
    if (!initialized) return;
    debug(tid +"="+ val);
    var tag = document.getElementById(tid+"_"+val);
    if (tag.type == "radio") {
        tag.checked = true;
        do_filter();
    }
}

function get_tags()
{
    var table = document.getElementById("TAG_TABLE");
    var input = table.getElementsByTagName("input");
    var tags = new Array();
    var i;
    debug_add("&lt;br&gt;Tags: ");
    for (i=0; i&lt;input.length; i++) {
        if (input[i].type == "radio" &amp;&amp; input[i].checked) {
            var tag = new Object();
            tag.name = input[i].name.substr(4); // strip TAG_
            tag.value = input[i].value;
            tags.push(tag);
            debug_add(tag.name + "=" + tag.value + " ");
        }
    }
    return tags;
}

function indexOf(arr, val)
{
    if (arr.indexOf) {
        // FF
        return arr.indexOf(val);
    }
    // MSIE
    var i;
    for (i=0; i&lt;arr.length; i++) {
        if (arr[i] == val) return i;
    }
    return -1;
}

function tag_match(tagstr, tagarray)
{
    var tags = tagstr ? tagstr.toUpperCase().split(" ") : [];
    var i, present;
    for (i=0; i&lt;tagarray.length; i++) {
        if (tagarray[i].value == "all") continue;
        if (indexOf(tags, tagarray[i].name) &gt;= 0) {
            present = true;
        } else {
            present = false;
        }
        if (tagarray[i].value == "set" &amp;&amp; !present) return false;
        if (tagarray[i].value == "not" &amp;&amp; present) return false;
    }
    return true;
}

var filter_count = 0;

function do_filter()
{
    if (!initialized) return;
    filter_count++;
    debug("Filter["+filter_count+"]");
    var genres = genre_get();
    var tags = get_tags();
    var mtable = document.getElementById("MTABLE");
    var rows = mtable.tBodies[0].rows;
    var i, mg, count = 0;
    var ymin, ymax, rmin, rmax, tmin, tmax;
    var my, mr, mrt, mtags;
    var show;
    ymin = document.getElementById("YMIN").value;
    ymax = document.getElementById("YMAX").value;
    rmin = document.getElementById("RMIN").value;
    rmax = document.getElementById("RMAX").value;
    tmin = document.getElementById("TMIN").value;
    tmax = document.getElementById("TMAX").value;
    debug_add("&lt;br&gt;Ranges: Y:"+ymin+"-"+ymax+" R:"+rmin+"-"+rmax+" T:"+tmin+"-"+tmax);
    var t1 = new Date().getTime();
    for (i=0; i&lt;rows.length; i++) {
        mg = getValue(rows[i], "MGENRE");
        show = genre_match(mg.toUpperCase(), genres);
        my = getNumValue(rows[i], "MYEAR");
        if (my &lt; ymin || my &gt; ymax) show = false;
        mr = getNumValue(rows[i], "MRATING");
        if (mr &lt; rmin || mr &gt; rmax) show = false;
        mrt = getNumValue(rows[i], "MRUNTIME");
        if (mrt &lt; tmin || mrt &gt; tmax) show = false;
        mtags = getValue(rows[i], "MTAGS");
        if (!tag_match(mtags, tags)) show = false;
        if (show) {
            //debug_add(i + mg + "&lt;br&gt;");
            rows[i].style.display = '';
            count++;
        } else {
            rows[i].style.display = "none";
        }
    }
    var t2 = new Date().getTime();
    var fstatus = document.getElementById("STATUS");
    var stat = "";
    if (count &lt; rows.length) {
        stat = count + " / ";
    } // else { stat = "All "; }
    stat += rows.length + " Movies";
    debug_add("  Time:" + (t2-t1) + " ms ");
    //stat += " [" + (t2-t1) + "]";
    fstatus.innerHTML = stat;
}

function numbersOnly(obj)
{
    obj.value = obj.value.replace(/[^0-9]/g, '');
}

function filter_reset()
{
    document.getElementById('FORM_FILTER').reset();
    do_filter();
}

function sh_filter(x, show)
{
    var showf = document.getElementById('SHOW_FILTER' + x);
    var hidef = document.getElementById('HIDE_FILTER' + x);
    if (show) {
        showf.style.display = 'none';
        hidef.style.display = '';
    } else {
        showf.style.display = '';
        hidef.style.display = 'none';
    }
}

function show_filter(x)
{
    sh_filter(x, true);
}

function hide_filter(x)
{
    sh_filter(x, false);
}

function init_filter()
{
    //genre_set_all(true);
    //tag_all();
    sh_filter(1, true);
    sh_filter(2, true);
    sh_filter(3, false);
    filter_reset();
}

function setActiveStyleSheet(title)
{
    var i, a, main;
    for(i=0; (a = document.getElementsByTagName("link")[i]); i++) {
        if(a.getAttribute("rel").indexOf("style") != -1
                &amp;&amp; a.getAttribute("title")) {
            a.disabled = true;
            if(a.getAttribute("title") == title) a.disabled = false;
        }
    }
}

function switchTheme(form)
{
    var OptionIndex=form.ThemeList.selectedIndex;
    setActiveStyleSheet(form.ThemeList.options[OptionIndex].value);
}</value>
  </data>
  <data name="Black" xml:space="preserve">
    <value>@import url(http://fonts.googleapis.com/css?family=Crimson+Text);
@import url(http://fonts.googleapis.com/css?family=Droid+Sans);
@import url(http://fonts.googleapis.com/css?family=Droid+Serif);
@import url(http://fonts.googleapis.com/css?family=Cardo);

#SORT_TITLE, #SORT_RATING, #SORT_RUNTIME, #SORT_YEAR, #SORT_DIRTIME {
font-weight:normal !important;
border:0 !important;
background:none !important;
text-decoration:none !important;
margin:0 10px 0 0 !important;
}
body {
background:#111111 !important;
color:#777777;
font-family:arial;
font-size:12px;
padding:15px;
margin:0;
}
a, a:link, a:visited {
color:#A2B340;
text-decoration:none;
font-size:13px !important;
}
a:hover {
text-decoration:underline;
font-weight:normal !important;
font-size:13px !important;
color:#BC8B40;
}
#FILTER_TABLE {
background:#191919 !important;
color:#777777 !important;
padding:10px;
border:1px solid #222222;
border-radius:8px;
-moz-border-radius:8px;
-khtml-border-radius:8px;
-webkit-border-radius:8px;
margin:10px 0 10px 0;
}
#FILTER_TABLE input {
margin:2px 6px 0 0;
}
.movietable {
font-family: Georgia, serif;
font-size: 20px;
font-weight: normal;
text-transform: normal;
letter-spacing: normal;
line-height: 1.1em;
color:#777777;
margin:0;
padding:0;
background:#080808;
filter: progid:DXImageTransform.Microsoft.gradient(startColorstr='#111111', endColorstr='#090909'); /* for IE */
background: -webkit-gradient(linear, left top, left bottom, from(#111), to(#090909)); /* for webkit browsers */
background: -moz-linear-gradient(top,  #111,  #090909); /* for firefox 3.6+ */
}
.movietable img {
min-width:214px !important;
max-width:214px !important;
min-height:314px !important;
margin:0 0 15px 0;
}
.poster {
}
.noposter {
background-image:url("noposter.png");
background-repeat:no-repeat;
min-width:214px !important;
max-width:214px !important;
min-height:314px !important;
height:314px !important;
}
.noposter span {
display:none;
}
.title {
padding:5px 0 0 16px;
}
.title a {
font-family:"Droid Sans";
font-size:22px !important;
font-weight:bolder !important;
}
.moviedesc td{
padding:5px 0 0 25px;
}
.plot {
}
.tags {
}
.moviemeta td {
padding:25px 0 0 25px !important;
}
.moviemeta, .moviemeta a {
font-size:11px !important;
}</value>
  </data>
  <data name="Old" xml:space="preserve">
    <value>.movietable {
background: whitesmoke;
}

.noposter {
background: gray;
}

.title {
background: lightblue;
}</value>
  </data>
  <data name="White" xml:space="preserve">
    <value>@import url(http://fonts.googleapis.com/css?family=Crimson+Text);
@import url(http://fonts.googleapis.com/css?family=Droid+Sans);
@import url(http://fonts.googleapis.com/css?family=Droid+Serif);
@import url(http://fonts.googleapis.com/css?family=Cardo);

#SORT_TITLE, #SORT_RATING, #SORT_RUNTIME, #SORT_YEAR, #SORT_DIRTIME {
font-weight:normal !important;
border:0 !important;
background:none !important;
text-decoration:none !important;
margin:0 10px 0 0 !important;
}
body {
background:#ffffff !important;
color:#777777;
font-family:arial;
font-size:12px;
margin:20px;
}
a, a:link, a:visited {
color:#458C26;
text-decoration:none;
font-size:13px !important;
}
a:hover {
text-decoration:underline;
font-weight:normal !important;
font-size:13px !important;
color:#0E302A;
}
#FILTER_TABLE {
background:#dddddd !important;
color:#444444 !important;
padding:10px;
border:1px solid #dddddd;
border-radius:8px;
-moz-border-radius:8px;
-khtml-border-radius:8px;
-webkit-border-radius:8px;
margin:10px 0 10px 0;
}
#FILTER_TABLE input {
margin:2px 6px 0 0;
}
.movietable {
font-family: Georgia, serif;
font-size: 20px;
font-weight: normal;
text-transform: normal;
letter-spacing: normal;
line-height: 1.1em;
color:#222222;
margin:10px 0 10px 0;
padding:0 0 30px 10px;
border-bottom:10px solid #ededed;
filter: progid:DXImageTransform.Microsoft.gradient(startColorstr='#ffffff', endColorstr='#dddddd'); /* for IE */
background: -webkit-gradient(linear, left top, left bottom, from(#fff), to(#dddddd)); /* for webkit browsers */
background: -moz-linear-gradient(top,  #fff,  #dddddd); /* for firefox 3.6+ */
}
.movietable:hover {
border-bottom:10px solid #dcdcdc;
}
.movietable img {
min-width:214px !important;
max-width:214px !important;
min-height:314px !important;
}
.poster {
/* border:1px solid red !important; */
/*margin:0 !important;
padding:0 !important;*/
}
.noposter {
background-image:url("noposter.png");
background-repeat:no-repeat;
min-width:214px !important;
max-width:214px !important;
min-height:314px !important;
height:314px !important;
}
.noposter span {
display:none;
}
.title {
padding:0 0 0 16px;
}
.title a {
font-family:"Droid Sans";
font-size:22px !important;
font-weight:bolder !important;
}
.moviedesc td{
padding:5px 0 0 25px;
}
.plot {
}
.tags {
}
.moviemeta td {
padding:25px 0 0 25px !important;
}
.moviemeta, .moviemeta a {
font-size:11px !important;
}</value>
  </data>
</root>